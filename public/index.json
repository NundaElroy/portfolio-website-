[{"content":"","date":null,"permalink":"/tags/backend/","section":"Tags","summary":"","title":"Backend"},{"content":"Connecting ReactJS App with OAuth2 and JWT to Spring Boot #In this tutorial, I\u0026rsquo;ll guide you through building a ReactJS app using Vite, secured with OAuth2 and JWT, communicating with a Spring Boot backend.\n","date":"29 March 2025","permalink":"/posts/third-post/","section":"Posts","summary":"","title":"Connecting ReactJS App with OAuth2 and JWT to Spring Boot(In the works)"},{"content":"ðŸ‘‹ Hi, I\u0026rsquo;m Sekyeza Elroy Nunda #I\u0026rsquo;m a passionate Software Developer with a keen interest in Backend Development and Cloud Technologies. My journey in the tech world is driven by a desire to build scalable, efficient, and user-centric solutions.\nGitHub LinkedIn Stay tuned as I share my journey, projects, and thoughts right here!\n","date":null,"permalink":"/","section":"Home","summary":"","title":"Home"},{"content":"","date":null,"permalink":"/tags/java/","section":"Tags","summary":"","title":"Java"},{"content":"","date":null,"permalink":"/tags/jwt/","section":"Tags","summary":"","title":"JWT"},{"content":"","date":null,"permalink":"/tags/oauth2/","section":"Tags","summary":"","title":"OAuth2"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/reactjs/","section":"Tags","summary":"","title":"ReactJS"},{"content":"","date":null,"permalink":"/tags/security/","section":"Tags","summary":"","title":"Security"},{"content":"","date":null,"permalink":"/tags/spring-boot/","section":"Tags","summary":"","title":"Spring Boot"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/tanstack-router/","section":"Tags","summary":"","title":"TanStack Router"},{"content":"Setting Up OAuth2 with Spring Boot #1. Introduction #OAuth2 is an open standard for access delegation commonly used to grant websites or applications limited access to user information without exposing their passwords. Itâ€™s essential for securing APIs, enabling Single Sign-On (SSO), and enhancing user experience by allowing seamless authentication with third-party providers like Google, Facebook, and GitHub. Spring Boot simplifies OAuth2 implementation by providing built-in support through the Spring Security framework(client server as well as authorisation server). With minimal configuration, developers can quickly integrate OAuth2 authentication, handle user sessions and secure API endpoints.\n2. Adding Dependencies #In your pom.xml, add the following dependencies:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-security\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-oauth2-client\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 3. Configuring OAuth2 in application.properties #You\u0026rsquo;ll need to register your application with an OAuth2 provider (Google, GitHub, etc.). so in our case we shall use for Google Here\u0026rsquo;s an example configuration for Google OAuth:\nIn your .properties files add the following fields\nspring.application.name=oauth2demo # OAuth2.0 Google Credentials spring.security.oauth2.client.registration.google.client-id= spring.security.oauth2.client.registration.google.client-secret= What are client-id and client-secret? In the context of OAuth2, the client-id and client-secret are credentials used to identify and authenticate your application when it communicates with an OAuth2 provider like Google.\nclient-id: A public identifier for your application. It\u0026rsquo;s what Google uses to recognize your app during the authentication process.\nclient-secret: A confidential credential known only to your application and the OAuth2 provider (Google). It acts like a password and must be kept secure. Never expose it in client-side code or public repositories.\nWhen your app attempts to authenticate a user, the client-id and client-secret are sent to the OAuth2 provider. If they match the registered credentials, the provider allows your app to proceed with authentication.\nWhere to get these credentials ? #Obtain OAuth 2.0 client credentials from the Google API Console guide. Obtain you client ID and secret and in place them as the values for the above respectively these are the credentials the Spring Security Oauth2 client uses for authentication with the google servers\n4. Creating the Security Configuration #Create a SecurityConfig.java file to configure OAuth2 authentication:\n@Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { http .authorizeHttpRequests(auth -\u0026gt; auth .anyRequest().authenticated() ) .oauth2Login(Customizer.withDefaults()) return http.build(); } } On success you will redirect to the home page of the page you can customize this using the success handler\n5. Testing OAuth2 Login # Run the Spring Boot app Visit http://localhost:8080/login Redirect to Google login page After logging in, Spring Security handles everything 6. Home Page # import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class HomeController { @GetMapping({\u0026#34;/\u0026#34;, \u0026#34;\u0026#34;}) public String home() { return \u0026#34;index.html\u0026#34;; } } note place it in the dir below since we arent using any template resolver\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Home\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;welcome to my app \u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt; A small price to pay for salvation\u0026lt;/h2\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Additional Resources To deepen your understanding of OAuth2 and Spring Security, consider checking out the following resources:\nOfficial Spring Security (Documentation)[https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html#oauth2-client] - Comprehensive guide to using Spring Security for various authentication mechanisms.\nSpring Security in Action by Laurentiu Spilca - A highly regarded book that explains Spring Security concepts in detail\nConclusion In this article, you\u0026rsquo;ve learned how to set up OAuth2 authentication with Spring Boot using Google as the provider. We\u0026rsquo;ve covered:\nAdding the necessary dependencies to your project.\nConfiguring OAuth2 client credentials (client-id and client-secret).\nImplementing a simple SecurityConfig for OAuth2 login.\n","date":"28 March 2025","permalink":"/posts/first-post/","section":"Posts","summary":"","title":"Setting up  OAuth2 with Spring Boot"},{"content":"Coming Soon ðŸš€ #","date":"1 January 0001","permalink":"/projects/","section":"Home","summary":"","title":""},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]